

Steps :

1. Generate public and private key using web-push in the server
npm install -g web-push
web-push generate-vapid-keys

2. send the public key to the client.

3.  subscribe to pushManager of the service worker registration object and pass
userVisibleOnly : true , applicationServerKey : 'public key og server'

// if in client
navigator.serviceWorker.getRegistration( reg => { 
    reg.pushManager.subscribe(
                    {
                        userVisibleOnly: true, 
                        applicationServerKey: urlB64ToUint8Array('BJ5IxJBWdeqFDJTvrZ4wNRu7UY2XigDXjgiUBYEYVXDudxhEs0ReOJRBcBHsPYgZ5dyV8VjyqzbQKS8V7bUAglk')
                    }
                        ).then( sub => {
                    console.log( sub );
    })
})

// if in sw.
self.registration.pushManager.subscribe( {
    //     userVisibleOnly: true, 
    //     applicationServerKey: 'BAVR1KZoitVgsfJ8ICyp4XE0H4riw8SRIjr26F4TqM7HUrl5f3clkOMLNu_xZkQB__eJ7f_GRmpdC--BZjqmzcA'
    // } ).then( sub => {
    //     console.log( sub );
    // }).catch( err =>{
    //     console.log( err );
    // })

// urlB64ToUint8Array is a magic function that will encode the base64 public key
// to Array buffer which is needed by the subscription option
const urlB64ToUint8Array = base64String => {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/')
  const rawData = atob(base64)
  const outputArray = new Uint8Array(rawData.length)
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

4. add a push event handler in service worker as the endpoint will tell that it need to find this service worker.

self.addEventListener( 'push', event => {
    var options ={
        body: "",
        tag...
    };

    self.registration.showNotification('Hello world', option)

})


5. Backend work.

- generate vapidKeys : web-push generate-vapid-keys in terminal or .generateVapidKeys() in code
- set details : 
    webPush.setVapidDetails(
    'mailto:myuserid@email.com',
    vapidKeys.publicKey,
    vapidKeys.privateKey
  )

webpush.setVapidDetails takes three arguments.
    First argument needs to be either a URL or a mailto email address.
    Second argument is the VAPID public key we generated earlier.
    Third argument is the VAPID private key.

 
- 




=======================================

Public Key:
BEouuI4xFlxsz_3kRLmjqXJVnTyrk9kWKPzF2HX0TfKuGTnhOQMEih51T-dMhkNvyO_QDpTux4cUg21uu773ASs

Private Key:
ZEC9Oqdt8Q_ms-zlowxsc7Z-ZqjB5dMc_-77_kpSiL8

=======================================